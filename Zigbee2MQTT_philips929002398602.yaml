blueprint:
  name: Philips Hue 929002398602 + Zigbee2MQTT + light
  description: |
    # Requirements:
    - Philips Hue Dimmer Switch 929002398602
    - Zigbee2MQTT
    - MQTT
    
    # Description:
    Purpose of this automation is to control lights with a Philips Hue Dimmer Switch via a Zigbee2MQTT bridge.
    - There is no need for helpers or other automation.
    - Dimming should be smooth and not jumpy.
    

  domain: automation
  input:
    remote_device_name:
      name: Remote MQTT Topic
      description: The friendly name in Zigbee2MQTT of the remote. Used in the MQTT topic of a device. By default this is the device ID
      default: "kitchen_dimmer"
    target_device_name:
      name: Target MQTT Topic
      description: The friendly name in Zigbee2MQTT of the device or group to control. Used in the MQTT topic of a device. By default this is the device ID
      default: "kitchen_lights"

    move_rate:
      name: Brightness Move Rate [steps/s]
      description: The rate at which brightness should change on up/down press.
      default: 50
      selector: 
        number:
          min: 1
          max: 255
          step: 1
          mode: slider
    color_temp:
      name: Color Temperature (optional)
      description: The color temperature to set when turning on the light (in mireds). Leave empty to not set color temperature.
      default: ''
      selector:
        text:
    color:
      name: Color (optional)
      description: The color to set when turning on the light (RGB, e.g. [255,0,0] for red). Leave empty to not set color.
      default: ''
      selector:
        text:

variables:
  move_rate: !input move_rate
  color_temp: !input color_temp
  color: !input color
  remote_device_name: !input remote_device_name
  target_device_name: !input target_device_name
  target_set_topic: "zigbee2mqtt/{{ target_device_name }}/set"
  remote_action_topic: "zigbee2mqtt/{{ remote_device_name }}/action"

mode: restart

trigger:
  - platform: mqtt
    topic: "{{ remote_action_topic }}"
    id: mqtt_action

condition: []

action:
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ trigger.payload == 'on_press' }}"
        sequence:
          - service: mqtt.publish
            data:
              topic: "{{ target_set_topic }}"
              payload: >
                {"state":"ON"{% if color_temp|length > 0 %}, "color_temp":{{ color_temp }}{% endif %}{% if color|length > 0 %}, "color": {"rgb": {{ color }} }{% endif %}}
              qos: 0
              retain: false
      - conditions:
          - condition: template
            value_template: "{{ trigger.payload == 'off_press' }}"
        sequence:
          - service: mqtt.publish
            data:
              topic: "{{ target_set_topic }}"
              payload: '{"state":"OFF"}'
              qos: 0
              retain: false
      - conditions:
          - condition: template
            value_template: "{{ trigger.payload == 'up_press' }}"
        sequence:
          - service: mqtt.publish
            data:
              topic: "{{ target_set_topic }}"
              payload: '{"brightness_move": {{ move_rate }}}'
              qos: 0
              retain: false
      - conditions:
          - condition: template
            value_template: "{{ trigger.payload == 'down_press' }}"
        sequence:
          - service: mqtt.publish
            data:
              topic: "{{ target_set_topic }}"
              payload: '{"brightness_move": {{ -move_rate }}}'
              qos: 0
              retain: false
      - conditions:
          - condition: template
            value_template: >
              {{ trigger.payload in ['up_press_release', 'down_press_release',
              'up_hold_release', 'down_hold_release'] }}
        sequence:
          - service: mqtt.publish
            data:
              topic: "{{ target_set_topic }}"
              payload: '{"brightness_move": 0}'
              qos: 0
              retain: false
    default: []